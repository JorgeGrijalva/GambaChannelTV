package com.arca.equipfix.gambachanneltv.data.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "programs".
*/
public class ChannelProgramDao extends AbstractDao<ChannelProgram, Long> {

    public static final String TABLENAME = "programs";

    /**
     * Properties of entity ChannelProgram.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property StartDate = new Property(2, java.util.Date.class, "startDate", false, "start_date");
        public final static Property EndDate = new Property(3, java.util.Date.class, "endDate", false, "end_date");
        public final static Property Description = new Property(4, String.class, "description", false, "description");
        public final static Property Actors = new Property(5, String.class, "actors", false, "actors");
        public final static Property Categories = new Property(6, String.class, "categories", false, "categories");
        public final static Property Rating = new Property(7, String.class, "rating", false, "rating");
        public final static Property StartRating = new Property(8, String.class, "startRating", false, "startRating");
        public final static Property SubTitle = new Property(9, String.class, "subTitle", false, "subTitle");
        public final static Property Year = new Property(10, int.class, "year", false, "year");
        public final static Property EpisodeNumber = new Property(11, String.class, "episodeNumber", false, "episodeNumber");
        public final static Property ChannelId = new Property(12, int.class, "channelId", false, "channel_id");
        public final static Property Reminder = new Property(13, boolean.class, "reminder", false, "reminder");
        public final static Property ChannelName = new Property(14, String.class, "channelName", false, "channelName");
    }


    public ChannelProgramDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelProgramDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"programs\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"title\" TEXT," + // 1: title
                "\"start_date\" INTEGER," + // 2: startDate
                "\"end_date\" INTEGER," + // 3: endDate
                "\"description\" TEXT," + // 4: description
                "\"actors\" TEXT," + // 5: actors
                "\"categories\" TEXT," + // 6: categories
                "\"rating\" TEXT," + // 7: rating
                "\"startRating\" TEXT," + // 8: startRating
                "\"subTitle\" TEXT," + // 9: subTitle
                "\"year\" INTEGER NOT NULL ," + // 10: year
                "\"episodeNumber\" TEXT," + // 11: episodeNumber
                "\"channel_id\" INTEGER NOT NULL ," + // 12: channelId
                "\"reminder\" INTEGER NOT NULL ," + // 13: reminder
                "\"channelName\" TEXT);"); // 14: channelName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"programs\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChannelProgram entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(3, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String actors = entity.getActors();
        if (actors != null) {
            stmt.bindString(6, actors);
        }
 
        String categories = entity.getCategories();
        if (categories != null) {
            stmt.bindString(7, categories);
        }
 
        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(8, rating);
        }
 
        String startRating = entity.getStartRating();
        if (startRating != null) {
            stmt.bindString(9, startRating);
        }
 
        String subTitle = entity.getSubTitle();
        if (subTitle != null) {
            stmt.bindString(10, subTitle);
        }
        stmt.bindLong(11, entity.getYear());
 
        String episodeNumber = entity.getEpisodeNumber();
        if (episodeNumber != null) {
            stmt.bindString(12, episodeNumber);
        }
        stmt.bindLong(13, entity.getChannelId());
        stmt.bindLong(14, entity.getReminder() ? 1L: 0L);
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(15, channelName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChannelProgram entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(3, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String actors = entity.getActors();
        if (actors != null) {
            stmt.bindString(6, actors);
        }
 
        String categories = entity.getCategories();
        if (categories != null) {
            stmt.bindString(7, categories);
        }
 
        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(8, rating);
        }
 
        String startRating = entity.getStartRating();
        if (startRating != null) {
            stmt.bindString(9, startRating);
        }
 
        String subTitle = entity.getSubTitle();
        if (subTitle != null) {
            stmt.bindString(10, subTitle);
        }
        stmt.bindLong(11, entity.getYear());
 
        String episodeNumber = entity.getEpisodeNumber();
        if (episodeNumber != null) {
            stmt.bindString(12, episodeNumber);
        }
        stmt.bindLong(13, entity.getChannelId());
        stmt.bindLong(14, entity.getReminder() ? 1L: 0L);
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(15, channelName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChannelProgram readEntity(Cursor cursor, int offset) {
        ChannelProgram entity = new ChannelProgram( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // startDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // endDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // actors
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // categories
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rating
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // startRating
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // subTitle
            cursor.getInt(offset + 10), // year
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // episodeNumber
            cursor.getInt(offset + 12), // channelId
            cursor.getShort(offset + 13) != 0, // reminder
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // channelName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChannelProgram entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEndDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setActors(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategories(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRating(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStartRating(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSubTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYear(cursor.getInt(offset + 10));
        entity.setEpisodeNumber(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setChannelId(cursor.getInt(offset + 12));
        entity.setReminder(cursor.getShort(offset + 13) != 0);
        entity.setChannelName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChannelProgram entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChannelProgram entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChannelProgram entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
