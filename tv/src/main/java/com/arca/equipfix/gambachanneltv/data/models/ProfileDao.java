package com.arca.equipfix.gambachanneltv.data.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "profiles".
*/
public class ProfileDao extends AbstractDao<Profile, Long> {

    public static final String TABLENAME = "profiles";

    /**
     * Properties of entity Profile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ProfileToken = new Property(1, String.class, "profileToken", false, "profileToken");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property PasswordProtected = new Property(3, boolean.class, "passwordProtected", false, "passwordProtected");
        public final static Property ProfilePassword = new Property(4, String.class, "profilePassword", false, "profilePassword");
        public final static Property EnableAdults = new Property(5, boolean.class, "enableAdults", false, "enableAdults");
        public final static Property Selected = new Property(6, boolean.class, "selected", false, "SELECTED");
    }


    public ProfileDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"profiles\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"profileToken\" TEXT," + // 1: profileToken
                "\"name\" TEXT," + // 2: name
                "\"passwordProtected\" INTEGER NOT NULL ," + // 3: passwordProtected
                "\"profilePassword\" TEXT," + // 4: profilePassword
                "\"enableAdults\" INTEGER NOT NULL ," + // 5: enableAdults
                "\"SELECTED\" INTEGER NOT NULL );"); // 6: selected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"profiles\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Profile entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String profileToken = entity.getProfileToken();
        if (profileToken != null) {
            stmt.bindString(2, profileToken);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getPasswordProtected() ? 1L: 0L);
 
        String profilePassword = entity.getProfilePassword();
        if (profilePassword != null) {
            stmt.bindString(5, profilePassword);
        }
        stmt.bindLong(6, entity.getEnableAdults() ? 1L: 0L);
        stmt.bindLong(7, entity.getSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Profile entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String profileToken = entity.getProfileToken();
        if (profileToken != null) {
            stmt.bindString(2, profileToken);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getPasswordProtected() ? 1L: 0L);
 
        String profilePassword = entity.getProfilePassword();
        if (profilePassword != null) {
            stmt.bindString(5, profilePassword);
        }
        stmt.bindLong(6, entity.getEnableAdults() ? 1L: 0L);
        stmt.bindLong(7, entity.getSelected() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Profile readEntity(Cursor cursor, int offset) {
        Profile entity = new Profile( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // profileToken
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getShort(offset + 3) != 0, // passwordProtected
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // profilePassword
            cursor.getShort(offset + 5) != 0, // enableAdults
            cursor.getShort(offset + 6) != 0 // selected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Profile entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setProfileToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPasswordProtected(cursor.getShort(offset + 3) != 0);
        entity.setProfilePassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnableAdults(cursor.getShort(offset + 5) != 0);
        entity.setSelected(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Profile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Profile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Profile entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
